Tad Diccionario:

-Estrucutra de representacion del TAD: Diccionario:=<mi_diccionario: lista(lista(ELEM))>
-Invariante de representacion: mi_diccionario.Iesimo(i).longitud()=2, para todo i.
-Agoritmos de las operaciones para la estructura de representacion elegida:
c:T_1, v:T_2 son dos tipos de datos fijos.

CrearDiccionario()--->Diccionario(T_1,T_2)
#Crea un diccionario vacio.
RV.mi_diccionario<--CrearLista()
return RV.mi_diccionario

D._Listar_c()--->Lista(T_1)
#Devuelve una lista con los elementos c de D en el orden en el que aparecen en D.
eltos=CrearLista()
i<--0
while(i<D.mi_diccionario.logitud()){
	eltos.Agregar(D.mi_diccionario.Iesimo(i).Iesimo(1))
	i<--i+1
return eltos

D._Listar_v()--->Lista(T_2)
#Devuelve una lista con los elementos v de D en el orden en el que aparecen en D.
eltos=CrearLista()
i<--0
while(i<D.mi_diccionario.logitud()){
	eltos.Agregar(D.mi_diccionario.Iesimo(i).Iesimo(2))
	i<--i+1
return eltos

D.Agregar(c,v)
#Asocia a la clave c con el valor v en el diccionario D (si ya habia una entrada con 
clave vm sobreescribe ese valor)
eltos_c=D._Listar_c()
eltos_v=D._Listar_v()
if(not c in eltos_c){
	D.mi_diccionario.Agregar([c,v])
}else{
	D.mi_diccionario.Iesimo(eltos_c.Indice(c)).BorrarIesimo(2)
	D.mi_diccionario.Iesimo(eltos_c.Indice(c)).Insertar(2,v)
	}

D.Definida?(c)--->B
#Dice si c esta en D.
eltos_c=D._Listar_c()
return (c in eltos_c)

D.Buscar(c)--->T_2
#Pre: D.Definida?(c).
#Devuelvo el valor v asociado a la clave v en D.
eltos_c=D._Listar_c()
eltos_v=D._Listar_v()
indice_c=eltos_c.Indice(c)
return eltos_v(indice_c)












